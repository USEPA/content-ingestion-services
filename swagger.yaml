openapi: 3.0.3
info:
  title: EPA Content Ingestion Services
  description: The content ingestion services (CIS) are used by EPA to power records
    management applications.
  contact:
    email: yuen.andrew@epa.gov
  version: 0.0.1
servers:
- url: http://localhost:8000/
tags:
- name: record_schedules
  description: APIs to access record schedule information.
- name: desktop
  description: APIs to support desktop file upload.
- name: email
  description: APIs to support email file upload.
- name: sharepoint
  description: APIs to support Sharepoint integration.
- name: my_records
  description: APIs for users to access their records.
- name: settings
  description: APIs to access and edit user settings.
- name: schedule_predictions
  description: All APIs that provide record schedule recommendations.
- name: user_info
  description: APIs to give information about the user.
- name: sems
  description: APIs for integration with SEMS.
- name: help
  description: APIs for accessing help content.
- name: gamification
  description: APIs which enable user activity tracking, leaderboards, and badges.
- name: keyword_extraction
  description: APIs which enable keyword and identifier extraction.
paths:
  /file_metadata_prediction:
    post:
      tags:
      - schedule_predictions
      - desktop
      summary: Gets record schedule, title, and description recommendations for a
        document.
      security:
        - Authorization: [] 
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: The file to get recommendations for.
                  format: binary
                prediction_metadata:
                  type: string
                  description: String of serialized JSON with prediction metadata.
      responses:
        200:
          description: Recommendations were successfully given.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataPrediction'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /text_metadata_prediction:
    post:
      tags:
      - schedule_predictions
      summary: Gets record schedule recommendation for given text.
      security:
        - Authorization: [] 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextPredictionRequest'
        required: false
      responses:
        200:
          description: Recommendations were successfully given.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataPrediction'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: TextPredictionRequest
  /email_metadata_prediction/{emailsource}:
    get:
      tags:
      - schedule_predictions
      - email
      summary: Gets metadata recommendations for given email.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: emailsource
        in: path
        description: Options are regular and archive.
        required: true
        schema:
          type: string
      - name: email_id
        in: query
        schema:
          type: string
      - name: file_name
        in: query
        schema:
          type: string
      - name: department
        in: query
        schema:
          type: string
      - name: mailbox
        in: query
        schema:
          type: string
      responses:
        200:
          description: Recommendations were successfully given.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataPrediction'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /get_user_info:
    get:
      tags:
      - user_info
      summary: Gets name, LAN ID, and department information for the user.
      security:
        - Authorization: [] 
        - AccessToken: []
      responses:
        200:
          description: User information retrieved.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserInfo'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /upload_file/v2:
    post:
      tags:
      - desktop
      summary: Upload a file to ECMS with metadata.
      security:
        - Authorization: [] 
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: Binary content of file to upload.
                  format: binary
                metadata:
                  type: string
                  description: String of serialized JSON with ECMS metadata.
                user_activity:
                  type: string
                  description: String of serialized JSON with user activity data.
                nuxeo_env:
                  type: string
                  description: Environment - either dev or prod.
      responses:
        200:
          description: File was successfully uploaded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /upload_file/v3:
    post:
      tags:
      - desktop
      summary: Upload a file to ECMS with metadata.
      security:
        - Authorization: [] 
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: Binary content of file to upload.
                  format: binary
                metadata:
                  type: string
                  description: String of serialized JSON with ECMSMetadataV2.
                user_activity:
                  type: string
                  description: String of serialized JSON with user activity data.
                nuxeo_env:
                  type: string
                  description: Environment - either dev or prod.
      responses:
        200:
          description: File was successfully uploaded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /get_mailboxes:
    get:
      tags:
      - email
      summary: List the mailboxes to which the user has access.
      security:
        - Authorization: [] 
      responses:
        200:
          description: Mailboxes successfully listed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetMailboxesResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /get_emails/{emailsource}:
    get:
      tags:
      - email
      summary: List the emails in a given mailbox.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: emailsource
        in: path
        description: Options are regular and archive.
        required: true
        schema:
          type: string
      - name: mailbox
        in: query
        schema:
          type: string
      - name: items_per_page
        in: query
        schema:
          type: integer
      - name: page_number
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Emails successfully retrieved.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetEmailResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /upload_email/v2/{emailsource}:
    post:
      tags:
      - email
      summary: Upload email to ARMS with metadata.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: emailsource
        in: path
        description: Options are regular and archive.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadEmailRequestV2'
        required: false
      responses:
        200:
          description: Email successfully uploaded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: upload_request
  /upload_email/v3/{emailsource}:
    post:
      tags:
      - email
      summary: Upload email to ARMS with metadata.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: emailsource
        in: path
        description: Options are regular and archive.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadEmailRequestV3'
        required: false
      responses:
        200:
          description: Email successfully uploaded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: upload_request
  /upload_sems_email/{emailsource}:
    post:
      tags:
      - email
      - sems
      summary: Upload email to SEMS with metadata.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: emailsource
        in: path
        description: Options are regular and archive.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadSEMSEmail'
        required: false
      responses:
        200:
          description: Email successfully uploaded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: upload_request
  /mark_email_saved/{emailsource}:
    post:
      tags:
      - email
      summary: Mark an email with the saved tag in Outlook.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: emailsource
        in: path
        description: Options are regular and archive.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkSavedRequestGraph'
        required: false
      responses:
        200:
          description: Email marked as saved.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: MarkSavedRequestGraph
  /untag_email/{emailsource}:
    post:
      tags:
      - email
      summary: Remove record tag in Outlook.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: emailsource
        in: path
        description: Options are regular and archive.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagRequestGraph'
        required: false
      responses:
        200:
          description: Record tag for email has been removed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: UntagRequestGraph
  /get_favorites:
    get:
      tags:
      - settings
      summary: Get record schedules favorited by user.
      security:
        - Authorization: [] 
      responses:
        200:
          description: Favorites were added.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetFavoritesResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /add_favorites:
    post:
      tags:
      - settings
      summary: Add favorites for user.
      security:
        - Authorization: [] 
      requestBody:
        description: Lan ID for the user whose favorites are to be added and the IDs
          of the new favs.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFavoritesRequest'
        required: false
      responses:
        200:
          description: Favorites were added.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: favs
  /remove_favorites:
    post:
      tags:
      - settings
      summary: Remove favorites for user.
      security:
        - Authorization: [] 
      requestBody:
        description: Lan ID for the user whose favorites are to be removed and the
          IDs of the favs.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveFavoritesRequest'
        required: false
      responses:
        200:
          description: Favorites were removed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: RemoveFavoritesRequest
  /update_preferred_system:
    post:
      tags:
      - settings
      summary: Update preferred records management system for user.
      security:
        - Authorization: [] 
      requestBody:
        description: System to set as the new default.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePreferredSystemRequest'
        required: false
      responses:
        200:
          description: Preferred system was updated.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: system
  /update_default_edit_mode:
    post:
      tags:
      - settings
      summary: Update default edit mode for user.
      security:
        - Authorization: [] 
      requestBody:
        description: Edit mode (basic or advanced) to set as the new default.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEditModeRequest'
        required: false
      responses:
        200:
          description: Default edit mode was updated.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: edit_mode
  /get_record_schedules:
    get:
      tags:
      - record_schedules
      summary: Get record schedule information.
      security:
        - Authorization: [] 
      responses:
        200:
          description: Record schedule information retrieved.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetRecordSchedulesResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /my_records/v2:
    get:
      tags:
      - my_records
      summary: Get information for existing records.
      security:
        - Authorization: [] 
      parameters:
      - name: query
        in: query
        schema:
          type: string
      - name: items_per_page
        in: query
        required: true
        schema:
          type: number
      - name: page_number
        in: query
        required: true
        schema:
          type: number
      - name: nuxeo_env
        in: query
        schema:
          type: string
          default: dev
      responses:
        200:
          description: Record information retrieved.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NuxeoRecordList'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /my_records_download/v2:
    get:
      tags:
      - my_records
      summary: Download existing records.
      security:
        - Authorization: [] 
      parameters:
      - name: uid
        in: query
        required: true
        schema:
          type: string
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: nuxeo_env
        in: query
        schema:
          type: string
          default: dev
      responses:
        200:
          description: Records zip file downloaded.
          content:
            '*/*':
              schema:
                type: string
                format: binary
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /get_sites:
    get:
      tags:
      - sems
      summary: Gets SEMS site information.
      security:
        - Authorization: [] 
      parameters:
      - name: region_id
        in: query
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: program_type
        in: query
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: search_term
        in: query
        schema:
          type: string
      - name: page_size
        in: query
        schema:
          type: string
      - name: page_start
        in: query
        schema:
          type: string
      responses:
        200:
          description: Site information retrieved.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetSitesResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /get_special_processing:
    get:
      tags:
      - sems
      summary: Gets SEMS special processing information.
      security:
        - Authorization: [] 
      parameters:
      - name: region
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Special processing information retrieved.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetSpecialProcessingResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /get_sharepoint_records:
    get:
      tags:
      - sharepoint
      summary: Get sharepoint list and site IDs for the user.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: page_number
        in: query
        schema:
          type: integer
      - name: items_per_page
        in: query
        schema:
          type: integer
      - name: filter_type
        in: query
        schema:
          type: string
          default: ready_for_submission
          enum:
          - ready_for_submission
          - in_batch
      responses:
        200:
          description: Sharepoint records were successfully returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SharepointListResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /sharepoint_metadata_prediction:
    get:
      tags:
      - sharepoint
      summary: Get record schedule predictions for a Sharepoint record.
      security:
        - Authorization: [] 
        - AccessToken: []
      parameters:
      - name: drive_item_id
        in: query
        required: true
        schema:
          type: string
      - name: file_name
        in: query
        schema:
          type: string
      - name: department
        in: query
        schema:
          type: string
      responses:
        200:
          description: Sharepoint metadata predictions were successfully returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataPrediction'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /upload_sharepoint_record/v2:
    post:
      tags:
      - sharepoint
      summary: Upload Sharepoint record to ECMS.
      security:
        - Authorization: [] 
        - AccessToken: []
      requestBody:
        description: ID fields and metadata needed to upload the record.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharepointUploadRequestV2'
        required: false
      responses:
        200:
          description: Record successfully uploaded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: data
  /upload_sharepoint_record/v3:
    post:
      tags:
      - sharepoint
      summary: Upload Sharepoint record to ECMS.
      security:
        - Authorization: [] 
        - AccessToken: []
      requestBody:
        description: ID fields and metadata needed to upload the record.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharepointUploadRequestV3'
        required: false
      responses:
        200:
          description: Record successfully uploaded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: data
  /upload_sharepoint_batch:
    post:
      tags:
      - sharepoint
      summary: Upload Sharepoint batch to be processed later.
      security:
        - Authorization: [] 
        - AccessToken: []
      requestBody:
        description: ID fields and metadata needed to specify the batch.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharepointBatchUploadRequest'
        required: false
      responses:
        200:
          description: Record successfully uploaded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: data
  /get_help_item:
    get:
      tags:
      - help
      summary: Get help item content by item id.
      security:
        - Authorization: [] 
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Help item successfully returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HelpItemResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /update_help_items:
    get:
      tags:
      - help
      summary: Update help item cache.
      security:
        - Authorization: [] 
      responses:
        200:
          description: Help item successfully updated.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /get_all_help_items:
    get:
      tags:
      - help
      summary: Get all help items.
      security:
        - Authorization: [] 
      parameters:
      - name: override
        in: query
        schema:
          type: boolean
      responses:
        200:
          description: Help items successfully returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AllHelpItemsResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /disposition_calc:
    get:
      tags:
      - disposition_calc
      summary: Gets disposition date.
      parameters:
      - name: close_date
        in: query
        required: true
        schema:
          type: string
      - name: record_schedule
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Disposition date successfully given.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DispositionDate'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /log_activity:
    post:
      tags:
      - gamification
      summary: Submit a user action which awards points.
      security:
        - Authorization: [] 
      requestBody:
        description: Activity information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogActivityRequest'
        required: false
      responses:
        200:
          description: User activity was recorded.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: log_activity_request
  /badge_info:
    get:
      tags:
      - gamification
      summary: Get information about the badges in the application.
      security:
        - Authorization: [] 
      responses:
        200:
          description: Badge information returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BadgeListResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /overall_leaderboard:
    get:
      tags:
      - gamification
      summary: Get overall leaderboard the application.
      security:
        - Authorization: [] 
      responses:
        200:
          description: Overall leaderboard information returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /office_leaderboard:
    get:
      tags:
      - gamification
      summary: Get leaderboard for the office.
      security:
        - Authorization: [] 
      parameters:
      - name: parent_org_code
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Office leaderboard information returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /gamification_data:
    get:
      tags:
      - gamification
      summary: Get points and badges for a user.
      security:
        - Authorization: []   
      parameters:
      - name: employee_number
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: office leaderboard information returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GamificationDataResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /extract_keywords:
    post:
      tags:
      - keyword_extraction
      summary: Extract keywords from text.
      security:
        - Authorization: []   
      requestBody:
        description: Text for extraction.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeywordExtractionRequest'
        required: false
      responses:
        200:
          description: Extracted keywords.
          content: {}
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: data
  /add_parent_child_relationship:
    post:
      tags:
      - my_records
      summary: Create parent/child relationships within Nuxeo.
      security:
        - Authorization: []   
      requestBody:
        description: Parent and child ids to link.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddParentChildRequest'
        required: false
      responses:
        200:
          description: Relationships were added successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        400:
          description: Invalid request - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        401:
          description: Unauthorized - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Server side error - description in response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: data
components:
  securitySchemes:
    Authorization:
      type: apiKey
      in: header
      name: Authorization
    AccessToken:
      type: apiKey
      in: header
      name: X-Access-Token
  schemas:
    Recommendation:
      type: object
      properties:
        schedule:
          $ref: '#/components/schemas/RecordSchedule'
        probability:
          type: number
    MetadataPrediction:
      type: object
      properties:
        predicted_schedules:
          type: array
          items:
            $ref: '#/components/schemas/Recommendation'
        default_schedule:
          $ref: '#/components/schemas/RecordSchedule'
        title:
          type: object
          properties:
            value:
              type: string
            prediction_type:
              type: string
        description:
          type: object
          properties:
            value:
              type: string
            prediction_type:
              type: string
        subjects:
          type: array
          items:
            type: string
        identifiers:
          type: object
          additionalProperties:
            type: string
        cui_categories:
          type: array
          items:
            type: string
        spatial_extent:
          type: array
          items:
            type: string
        temporal_extent:
          type: array
          items:
            type: string
    AddFavoritesRequest:
      type: object
      properties:
        record_schedules:
          type: array
          items:
            $ref: '#/components/schemas/RecordSchedule'
    RemoveFavoritesRequest:
      type: object
      properties:
        record_schedules:
          type: array
          items:
            $ref: '#/components/schemas/RecordSchedule'
    KeywordExtractionRequest:
      type: object
      properties:
        text:
          type: string
    StatusResponse:
      type: object
      properties:
        status:
          type: string
        reason:
          type: string
        request_id:
          type: string
    PredictionMetadata:
      type: object
      properties:
        file_name:
          type: string
        department:
          type: string
        file_path:
          type: string
    TextPredictionRequest:
      type: object
      properties:
        text:
          type: string
        prediction_metadata:
          $ref: '#/components/schemas/PredictionMetadata'
    GetMailboxesResponse:
      type: object
      properties:
        mailboxes:
          type: array
          items:
            type: string
    SemsSite:
      type: object
      properties:
        _id:
          type: string
        region:
          type: string
        epaid:
          type: string
        sitename:
          type: string
        program_id:
          type: string
        operable_units:
          type: array
          items:
            type: string
        ssids:
          type: array
          items:
            type: string
    GetSitesResponse:
      type: object
      properties:
        sites:
          type: array
          items:
            $ref: '#/components/schemas/SemsSite'
    SemsSpecialProcessing:
      type: object
      properties:
        description:
          type: string
        code:
          type: string
    GetSpecialProcessingResponse:
      type: object
      properties:
        special_processing:
          type: array
          items:
            $ref: '#/components/schemas/SemsSpecialProcessing'
    EmailAttachment:
      type: object
      properties:
        name:
          type: string
        attachment_id:
          type: string
    GetEmailResponse:
      type: object
      properties:
        total_count:
          type: integer
        page_number:
          type: integer
        items_per_page:
          type: integer
        emails:
          type: array
          items:
            type: object
            properties:
              unid:
                type: string
              email_id:
                type: string
              _from:
                type: string
              to:
                type: string
              cc:
                type: string
              subject:
                type: string
              sent:
                type: string
              received:
                type: string
              attachments:
                type: array
                items:
                  $ref: '#/components/schemas/EmailAttachment'
              mailbox_source:
                type: string
              categories:
                type: array
                items:
                  type: string
                  
    AttachmentSchedule:
      type: object
      properties:
        name:
          type: string
        schedule:
          $ref: '#/components/schemas/RecordSchedule'
        close_date:
          type: string
    UploadEmailRequestV2:
      type: object
      properties:
        email_id:
          type: string
        email_unid:
          type: string
        mailbox:
          type: string
        metadata:
          $ref: '#/components/schemas/ECMSMetadata'
        user_activity:
          $ref: '#/components/schemas/SubmissionAnalyticsMetadata'
        nuxeo_env:
          type: string
          default: dev
          enum:
          - dev
          - prod
        attachment_schedules:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentSchedule'
    UploadEmailRequestV3:
      type: object
      properties:
        email_id:
          type: string
        email_unid:
          type: string
        mailbox:
          type: string
        metadata:
          $ref: '#/components/schemas/ECMSMetadataV2'
        user_activity:
          $ref: '#/components/schemas/SubmissionAnalyticsMetadata'
        nuxeo_env:
          type: string
          default: dev
          enum:
          - dev
          - prod
        attachment_schedules:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentSchedule'
    SubmissionAnalyticsMetadata:
      type: object
      properties:
        predicted_schedules:
          type: array
          items:
            $ref: '#/components/schemas/Recommendation'
        default_schedule:
          $ref: '#/components/schemas/RecordSchedule'
        used_modal_form:
          type: boolean
        used_recommended_schedule:
          type: boolean
        used_schedule_dropdown:
          type: boolean
        used_default_schedule:
          type: boolean
        used_favorite_schedule:
          type: boolean
    MarkSavedRequestGraph:
      type: object
      properties:
        email_id:
          type: string
        sensitivity:
          type: string
          enum:
          - shared
          - private
        mailbox:
          type: string
    UntagRequestGraph:
      type: object
      properties:
        email_id:
          type: string
        mailbox:
          type: string
    ECMSMetadata:
      type: object
      properties:
        file_path:
          type: string
        custodian:
          type: string
        title:
          type: string
        description:
          type: string
        record_schedule:
          $ref: '#/components/schemas/RecordSchedule'
        creator:
          type: string
        creation_date:
          type: string
        close_date:
          type: string
        disposition_date:
          type: string
        sensitivity:
          type: string
          enum:
          - shared
          - private
        rights:
          type: array
          items:
            type: string
        coverage:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        relationships:
          type: array
          items:
            type: string
        identifiers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        record_id:
          type: string
    ECMSMetadataV2:
      type: object
      properties:
        file_path:
          type: string
        custodian:
          type: string
        title:
          type: string
        description:
          type: string
        access_restriction_status:
          type: string
        use_restriction_status:
          type: string
        essential_records:
          type: string
          enum:
          - "Yes"
          - "No"
        record_schedule:
          $ref: '#/components/schemas/RecordSchedule'
        close_date:
          type: string
        disposition_date:
          type: string
        sensitivity:
          type: string
          enum:
          - shared
          - private
        rights_holder:
          type: array
          items:
            type: string
        specific_access_restriction:
          type: array
          items:
            type: string
        specific_use_restriction:
          type: array
          items:
            type: string
        spatial_extent:
          type: array
          items:
            type: string
        temporal_extent:
          type: array
          items:
            type: string
        subjects:
          type: array
          items:
            type: string
        epa_contact:
          type: array
          items:
            type: string
        cui_pii_categories:
          type: array
          items:
            type: string
        non_epa_contact:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        identifiers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        record_id:
          type: string
    RecordSchedule:
      type: object
      properties:
        function_number:
          type: string
        schedule_number:
          type: string
        disposition_number:
          type: string
    RecordScheduleInformation:
      type: object
      properties:
        function_number:
          type: string
        schedule_number:
          type: string
        disposition_number:
          type: string
        display_name:
          type: string
        schedule_title:
          type: string
        disposition_title:
          type: string
        disposition_instructions:
          type: string
        cutoff_instructions:
          type: string
        function_title:
          type: string
        program:
          type: string
        applicability:
          type: string
        nara_disposal_authority_item_level:
          type: string
        nara_disposal_authority_schedule_level:
          type: string
        final_disposition:
          type: string
        disposition_summary:
          type: string
        description:
          type: string
        guidance:
          type: string
        keywords:
          type: string
        ten_year:
          type: boolean
    GetFavoritesResponse:
      type: object
      properties:
        favorites:
          type: array
          items:
            $ref: '#/components/schemas/RecordSchedule'
    GetRecordSchedulesResponse:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/RecordScheduleInformation'
    UserSettings:
      type: object
      properties:
        preferred_system:
          type: string
        default_edit_mode:
          type: string
    UpdatePreferredSystemRequest:
      type: object
      properties:
        preferred_system:
          type: string
    UpdateEditModeRequest:
      type: object
      properties:
        default_edit_mode:
          type: string
    UserInfo:
      type: object
      properties:
        lan_id:
          type: string
        display_name:
          type: string
        email:
          type: string
        department:
          type: string
        parent_org_code:
          type: string
        manager_department:
          type: string
        manager_parent_org_code:
          type: string
        employee_number:
          type: string
        badges:
          type: array
          items:
            $ref: '#/components/schemas/BadgeInfo'
        profile:
          $ref: '#/components/schemas/ProfileInfo'
        user_settings:
          $ref: '#/components/schemas/UserSettings'
        direct_reports:
          type: array
          items:
            type: string
    GamificationDataResponse:
      type: object
      properties:
        badges:
          type: array
          items:
            $ref: '#/components/schemas/BadgeInfo'
        profile:
          $ref: '#/components/schemas/ProfileInfo'
    BadgeInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        image_url:
          type: string
    ProfileInfo:
      type: object
      properties:
        points:
          type: string
        level:
          type: string
        office_rank:
          type: string
        overall_rank:
          type: string
    NuxeoRecordList:
      type: object
      properties:
        total:
          type: number
        records:
          type: array
          items:
            $ref: '#/components/schemas/NuxeoDocInfo'
    NuxeoDocInfo:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        sensitivity:
          type: string
          enum:
          - shared
          - private
        size:
          type: number
        custodian:
          type: string
        upload_date:
          type: string
        metadata:
          $ref: '#/components/schemas/ECMSMetadata'
    SharepointItem:
      type: object
      properties:
        drive_item_id:
          type: string
        list_item_id:
          type: string
        metadata:
          $ref: '#/components/schemas/ECMSMetadata'
    SharepointBatchUploadRequest:
      type: object
      properties:
        sharepoint_items:
          type: array
          items:
            $ref: '#/components/schemas/SharepointItem'
        documentum_env:
          type: string
    SharepointRecord:
      type: object
      properties:
        web_url:
          type: string
        records_status:
          type: string
        sensitivity:
          type: string
        drive_item_id:
          type: string
        name:
          type: string
        created_date:
          type: string
        last_modified_date:
          type: string
        list_item_id:
          type: string
        detected_schedule:
          $ref: '#/components/schemas/RecordSchedule'
        size:
          type: number
    SharepointListResponse:
      type: object
      properties:
        records:
          type: array
          items:
            $ref: '#/components/schemas/SharepointRecord'
    SharepointUploadRequestV2:
      type: object
      properties:
        drive_item_id:
          type: string
        metadata:
          $ref: '#/components/schemas/ECMSMetadata'
        user_activity:
          $ref: '#/components/schemas/SubmissionAnalyticsMetadata'
        nuxeo_env:
          type: string
    SharepointUploadRequestV3:
      type: object
      properties:
        drive_item_id:
          type: string
        metadata:
          $ref: '#/components/schemas/ECMSMetadataV2'
        user_activity:
          $ref: '#/components/schemas/SubmissionAnalyticsMetadata'
        nuxeo_env:
          type: string
    LeaderboardRecord:
      type: object
      properties:
        id:
          type: string
        lan_id:
          type: string
        employee_id:
          type: string
        points:
          type: string
        level:
          type: string
        overall_rank:
          type: string
    LeaderboardResponse:
      type: array
      items:
        $ref: '#/components/schemas/LeaderboardRecord'
    BadgeListResponse:
      type: array
      items:
        $ref: '#/components/schemas/BadgeInfo'
    HelpItemResponse:
      type: object
      properties:
        name:
          type: string
        html_content:
          type: string
        markdown_content:
          type: string
        is_faq:
          type: boolean
        question:
          type: string
    AllHelpItemsResponse:
      type: object
      properties:
        help_items:
          type: array
          items:
            $ref: '#/components/schemas/HelpItemResponse'
    LogActivityRequest:
      type: object
      properties:
        employee_id:
          type: string
        lan_id:
          type: string
        office_code:
          type: string
        event_id:
          type: string
    DispositionDate:
      type: object
      properties:
        disposition_date:
          type: string
    UploadResponse:
      type: object
      properties:
        record_id:
          type: string
        uid:
          type: string
    AddParentChildRequest:
      type: object
      properties:
        parent_id:
          type: string
        child_ids:
          type: array
          items:
            type: string
        nuxeo_env:
          type: string
    SEMSAttachmentInfo:
      type: object
      properties:
        sems_uid: 
          type: string
        name:
          type: string
        attachment_id:
          type: string
        record_schedule:
          type: object
          $ref: '#/components/schemas/RecordSchedule'

    SEMSMetadata:
      type: object
      properties:
        sems_uid:
          type: string
        region:
          type: string
        program_type:
          type: string
        sites:
          type: array
          items:
            type: string
        ous:
          type: array
          items:
            type: string
        ssids:
          type: array
          items:
            type: string
        record_schedule:
          type: object
          $ref: '#/components/schemas/RecordSchedule'
        access_control:
          type: array
          items:
            type: string
        program_areas:
          type: array
          items:
            type: string
        special_processing:
          type: array
          items:
            type: string
        processing_comments:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        file_name:
          type: string
        attachment_info:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/SEMSAttachmentInfo'
    EmailInfo:
      type: object
      properties:
        to:
          type: array
          items:
            type: string
        cc:
          type: array
          items:
            type: string
        _from:
          type: string
        date:
          type: string
        subject:
          type: string
    UploadSEMSEmail:
      type: object
      properties:
        metadata:
          type: object
          $ref: '#/components/schemas/SEMSMetadata'
        email_info:
          type: object
          $ref: '#/components/schemas/EmailInfo'
        mailbox:
          type: string
        email_id:
          type: string
        record_id:
          type: string
        email_unid:
          type: string
        nuxeo_env:
          type: string


